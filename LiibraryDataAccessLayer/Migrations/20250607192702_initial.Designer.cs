// <auto-generated />
using System;
using LiibraryDataAccessLayer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LiibraryDataAccessLayer.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20250607192702_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LiibraryDataAccessLayer.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("AdditionalDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ISBN");

                    b.Property<DateOnly>("PublicationDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BookId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Genre = "Programming",
                            Isbn = "978-1234567890",
                            PublicationDate = new DateOnly(1, 1, 1),
                            Title = "C# Programming Basics"
                        });
                });

            modelBuilder.Entity("LiibraryDataAccessLayer.Models.BookCopy", b =>
                {
                    b.Property<int>("CopyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CopyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CopyId"));

                    b.Property<bool>("AvailabilityStatus")
                        .HasMaxLength(50)
                        .HasColumnType("bit");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.HasKey("CopyId");

                    b.HasIndex("BookId");

                    b.ToTable("BookCopies");

                    b.HasData(
                        new
                        {
                            CopyId = 1,
                            AvailabilityStatus = false,
                            BookId = 1
                        });
                });

            modelBuilder.Entity("LiibraryDataAccessLayer.Models.BorrowingRecord", b =>
                {
                    b.Property<int>("BorrowingRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BorrowingRecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BorrowingRecordId"));

                    b.Property<DateTime?>("ActualReturnDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("BorrowingDate")
                        .HasColumnType("date");

                    b.Property<int>("CopyId")
                        .HasColumnType("int")
                        .HasColumnName("CopyID");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("BorrowingRecordId");

                    b.HasIndex("CopyId");

                    b.HasIndex("UserId");

                    b.ToTable("BorrowingRecords");

                    b.HasData(
                        new
                        {
                            BorrowingRecordId = 1,
                            BorrowingDate = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CopyId = 1,
                            DueDate = new DateTime(2025, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("LiibraryDataAccessLayer.Models.Fine", b =>
                {
                    b.Property<int>("FineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FineID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FineId"));

                    b.Property<int>("BorrowingRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BorrowingRecordID");

                    b.Property<decimal>("FineAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<short>("NumberOfLateDays")
                        .HasColumnType("smallint");

                    b.Property<bool>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("FineId");

                    b.HasIndex("BorrowingRecordId");

                    b.HasIndex("UserId");

                    b.ToTable("Fines");

                    b.HasData(
                        new
                        {
                            FineId = 1,
                            BorrowingRecordId = 1,
                            FineAmount = 0m,
                            NumberOfLateDays = (short)0,
                            PaymentStatus = true,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("LiibraryDataAccessLayer.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReservationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<int>("CopyId")
                        .HasColumnType("int")
                        .HasColumnName("CopyID");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ReservationId");

                    b.HasIndex("CopyId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            ReservationId = 1,
                            CopyId = 1,
                            ReservationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("LiibraryDataAccessLayer.Models.Setting", b =>
                {
                    b.Property<int>("SettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SettingsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingsId"));

                    b.Property<int>("DefaultBorrowDays")
                        .HasColumnType("int");

                    b.Property<decimal>("DefaultFinePerDay")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("SettingsId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            SettingsId = 1,
                            DefaultBorrowDays = 7,
                            DefaultFinePerDay = 4m,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("LiibraryDataAccessLayer.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LibraryCardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ContactInformation = "john@example.com",
                            LibraryCardNumber = "LC123",
                            Name = "John Doe",
                            PasswordHash = "hashedpassword123",
                            Username = "johndoe"
                        });
                });

            modelBuilder.Entity("LiibraryDataAccessLayer.Models.BookCopy", b =>
                {
                    b.HasOne("LiibraryDataAccessLayer.Models.Book", "Book")
                        .WithMany("BookCopies")
                        .HasForeignKey("BookId")
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LiibraryDataAccessLayer.Models.BorrowingRecord", b =>
                {
                    b.HasOne("LiibraryDataAccessLayer.Models.BookCopy", "Copy")
                        .WithMany("BorrowingRecords")
                        .HasForeignKey("CopyId")
                        .IsRequired();

                    b.HasOne("LiibraryDataAccessLayer.Models.User", "User")
                        .WithMany("BorrowingRecords")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Copy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LiibraryDataAccessLayer.Models.Fine", b =>
                {
                    b.HasOne("LiibraryDataAccessLayer.Models.BorrowingRecord", "BorrowingRecord")
                        .WithMany("Fines")
                        .HasForeignKey("BorrowingRecordId")
                        .IsRequired();

                    b.HasOne("LiibraryDataAccessLayer.Models.User", "User")
                        .WithMany("Fines")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("BorrowingRecord");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LiibraryDataAccessLayer.Models.Reservation", b =>
                {
                    b.HasOne("LiibraryDataAccessLayer.Models.BookCopy", "Copy")
                        .WithMany("Reservations")
                        .HasForeignKey("CopyId")
                        .IsRequired();

                    b.HasOne("LiibraryDataAccessLayer.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Copy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LiibraryDataAccessLayer.Models.Setting", b =>
                {
                    b.HasOne("LiibraryDataAccessLayer.Models.User", "User")
                        .WithOne("settings")
                        .HasForeignKey("LiibraryDataAccessLayer.Models.Setting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LiibraryDataAccessLayer.Models.Book", b =>
                {
                    b.Navigation("BookCopies");
                });

            modelBuilder.Entity("LiibraryDataAccessLayer.Models.BookCopy", b =>
                {
                    b.Navigation("BorrowingRecords");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("LiibraryDataAccessLayer.Models.BorrowingRecord", b =>
                {
                    b.Navigation("Fines");
                });

            modelBuilder.Entity("LiibraryDataAccessLayer.Models.User", b =>
                {
                    b.Navigation("BorrowingRecords");

                    b.Navigation("Fines");

                    b.Navigation("Reservations");

                    b.Navigation("settings")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
